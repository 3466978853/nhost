name: Nhost CLI
description: 'Install Nhost CLI'
inputs:
  start:
    description: "Start the application. If false, the application won't be started"
  wait:
    description: 'If starting the application, wait for the app to be ready'
    default: 'true'
  stop:
    description: 'Stop the application'
    default: 'false'
  path:
    description: 'Path to the application'
    default: '.'
  version:
    description: 'Version of the Nhost CLI'
    default: 'latest'
  config:
    description: 'Custom Nhost CLI config'

runs:
  using: 'composite'
  steps:
    - name: Check if Nhost CLI is already installed
      id: check-nhost-cli
      shell: bash
      # TODO check if the version is the same
      run: |
        if [ -z "$(which nhost)" ]
        then
            echo "installed=false" >> $GITHUB_OUTPUT
        else
            echo "installed=true" >> $GITHUB_OUTPUT
        fi
    - name: Install Nhost CLI
      if: ${{ steps.check-nhost-cli.outputs.installed == 'false' }}
      shell: bash
      run: bash <(curl --silent -L https://raw.githubusercontent.com/nhost/cli/main/get.sh) ${{ inputs.version }}
    - name: Set custom configuration
      if: ${{ inputs.config }}
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        config="${{ inputs.config }}"
        for key in $(echo "$config" | yq '. | keys | .[]'); do
            value=$(echo "$config" | yq  -o=json ".\"$key\"")
            yq -i ".$key = $value" nhost/config.yaml
        done
    - name: Start the application
      if: ${{ inputs.start != 'false' || (inputs.stop == 'true' && inputs.start == 'true') }}
      shell: bash
      working-directory: ${{ inputs.path }}
      run: nhost dev --no-browser &
    - name: Wait for the app to be ready
      id: wait
      if: ${{ inputs.start == 'true' && inputs.wait == 'true' }}
      shell: bash
      working-directory: ${{ inputs.path }}
      continue-on-error: true
      run: |
        curl -sSf --connect-timeout 3 \
          --max-time 5 \
          --retry 300 \
          --retry-delay 1 \
          --retry-max-time 300 \
          --retry-connrefused \
          'http://localhost:9695' > /dev/null
    - name: Log on failure
      if: steps.wait.outcome == 'failure'
      shell: bash
      working-directory: ${{ inputs.path }}
      run: |
        nhost logs
        exit 1
    - name: Stop the application
      if: ${{ inputs.stop == 'true' }}
      shell: bash
      working-directory: ${{ inputs.path }}
      run: nhost down
