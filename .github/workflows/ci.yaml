name: Continuous Integration

on:
  push:
    branches: [main]
    paths-ignore:
      - 'assets/**'
      - '**.md'
      - 'LICENSE'
  pull_request:
    types: [opened, synchronize]
    paths-ignore:
      - 'assets/**'
      - '**.md'
      - 'LICENSE'
env:
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: nhost
  NEXT_PUBLIC_ENV: dev
  NEXT_TELEMETRY_DISABLED: 1
  NEXT_PUBLIC_NHOST_BACKEND_URL: http://localhost:1337

jobs:
  build:
    name: Build @nhost packages
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      # * Install Node and dependencies. Package downloads will be cached for the next jobs.
      - name: Install Node and dependencies
        uses: ./.github/actions/install-dependencies
        with:
          TURBO_TOKEN: ${{ env.TURBO_TOKEN }}
          TURBO_TEAM: ${{ env.TURBO_TEAM }}
          BUILD: 'all'
      - name: Check if the pnpm lockfile changed
        id: changed-lockfile
        uses: tj-actions/changed-files@v35
        with:
          files: pnpm-lock.yaml
      # * Determine a pnpm filter argument for packages that have been modified.
      # * If the lockfile has changed, we don't filter anything in order to run all the e2e tests.
      - name: filter packages
        id: filter-packages
        if: steps.changed-lockfile.outputs.any_changed != 'true' && github.event_name == 'pull_request'
        run: echo "filter=${{ format('--filter=...[origin/{0}]', github.base_ref) }}" >> $GITHUB_OUTPUT
      # * List packagesthat has an `e2e` script, except the root, and return an array of their name and path
      # * In a PR, only include packages that have been modified, and their dependencies
      - name: List examples with an e2e script
        id: set-matrix
        run: |
          PACKAGES=$(pnpm recursive list --depth -1 --parseable --filter='!nhost-root' ${{ steps.filter-packages.outputs.filter }} \
            | xargs -I@ realpath --relative-to=$PWD @ \
            | xargs -I@ jq "if (.scripts.e2e | length) != 0  then {name: .name, path: \"@\"} else null end" @/package.json \
            | awk "!/null/" \
            | jq -c --slurp 'map(select(length > 0))')
          echo "matrix=$PACKAGES" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}

  unit:
    name: Unit tests
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # * Install Node and dependencies. Package dependencies won't be downloaded again as they have been cached by the `build` job.
      - name: Install Node and dependencies
        uses: ./.github/actions/install-dependencies
        with:
          TURBO_TOKEN: ${{ env.TURBO_TOKEN }}
          TURBO_TEAM: ${{ env.TURBO_TEAM }}
      # * Run every `test` script in the workspace . Dependencies build is cached by Turborepo
      - name: Run unit tests
        run: pnpm run test:all
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          files: '**/coverage/coverage-final.json'
          name: codecov-umbrella
      - name: Create summary
        run: |
          echo '### Code coverage' >> $GITHUB_STEP_SUMMARY
          echo 'Visit [codecov](https://app.codecov.io/gh/nhost/nhost/) to see the code coverage reports' >> $GITHUB_STEP_SUMMARY

  lint:
    name: Lint
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      # * Install Node and dependencies. Package dependencies won't be downloaded again as they have been cached by the `build` job.
      - name: Install Node and dependencies
        uses: ./.github/actions/install-dependencies
        with:
          TURBO_TOKEN: ${{ env.TURBO_TOKEN }}
          TURBO_TEAM: ${{ env.TURBO_TEAM }}
      # * Run every `lint` script in the workspace . Dependencies build is cached by Turborepo
      - name: Lint
        run: pnpm run lint:all
